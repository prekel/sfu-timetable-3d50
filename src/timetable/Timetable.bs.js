// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "rescript/lib/es6/array.js";
import * as Compat from "../utils/compat.bs.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as LessonTime from "./LessonTime.bs.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function decodeStringExn(obj, key) {
  return Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, key), Js_json.decodeString));
}

function toNumber(day) {
  return day + 1 | 0;
}

function fromNumber(number) {
  if (number > 7 || number < 1) {
    return Pervasives.failwith("No day of week");
  } else {
    return number - 1 | 0;
  }
}

function decodeExn(json) {
  return fromNumber(Belt_Option.getExn(Belt_Int.fromString(Belt_Option.getExn(Js_json.decodeString(json)))));
}

function toRu(day) {
  switch (day) {
    case /* Monday */0 :
        return "Понедельник";
    case /* Tuesday */1 :
        return "Вторник";
    case /* Wednesday */2 :
        return "Среда";
    case /* Thursday */3 :
        return "Четверг";
    case /* Friday */4 :
        return "Пятница";
    case /* Saturday */5 :
        return "Суббота";
    case /* Sunday */6 :
        return "Воскресенье";
    
  }
}

function toEn(day) {
  switch (day) {
    case /* Monday */0 :
        return "Monday";
    case /* Tuesday */1 :
        return "Tuesday";
    case /* Wednesday */2 :
        return "Wednesday";
    case /* Thursday */3 :
        return "Thursday";
    case /* Friday */4 :
        return "Friday";
    case /* Saturday */5 :
        return "Saturday";
    case /* Sunday */6 :
        return "Sunday";
    
  }
}

var Day = {
  toNumber: toNumber,
  fromNumber: fromNumber,
  decodeExn: decodeExn,
  toRu: toRu,
  toEn: toEn
};

function fromNumber$1(n) {
  if (n !== 1) {
    if (n !== 2) {
      return Pervasives.failwith("");
    } else {
      return /* Even */1;
    }
  } else {
    return /* Uneven */0;
  }
}

function decodeExn$1(json) {
  return fromNumber$1(Belt_Option.getExn(Belt_Int.fromString(Belt_Option.getExn(Js_json.decodeString(json)))));
}

function fromDate(date) {
  var day = date.getDate() | 0;
  var month = date.getMonth() | 0;
  var year = date.getFullYear() | 0;
  var month$1 = month + 1 | 0;
  var a = Js_math.floor((14 - month$1) / 12);
  var y = (year + 4800 | 0) - a | 0;
  var m = (month$1 + Math.imul(12, a) | 0) - 3 | 0;
  var j = (((((day + Js_math.floor((153 * m + 2) / 5) | 0) + Math.imul(365, y) | 0) + Js_math.floor(y / 4) | 0) - Js_math.floor(y / 100) | 0) + Js_math.floor(y / 400) | 0) - 32045 | 0;
  var d4 = ((j + 31741 | 0) - j % 7 | 0) % 146097 % 36524 % 1461;
  var l = Js_math.floor(d4 / 1460);
  var d1 = (d4 - l | 0) % 365 + l | 0;
  var week = Js_math.floor(d1 / 7) + 1 | 0;
  if (week % 2 === 0) {
    return /* Even */1;
  } else {
    return /* Uneven */0;
  }
}

var Week = {
  fromNumber: fromNumber$1,
  decodeExn: decodeExn$1,
  fromDate: fromDate
};

function decodeExn$2(json) {
  try {
    var obj = Belt_Option.getExn(Js_json.decodeObject(json));
    var day = Belt_Option.getExn(Belt_Option.map(Js_dict.get(obj, "day"), decodeExn));
    var week = Belt_Option.getExn(Belt_Option.map(Js_dict.get(obj, "week"), decodeExn$1));
    var teacher = Belt_Option.flatMap(Js_dict.get(obj, "teacher"), Js_json.decodeString);
    var group = Belt_Option.map(Belt_Option.map(Belt_Option.flatMap(Js_dict.get(obj, "group"), Js_json.decodeArray), (function (param) {
                return $$Array.map(Js_json.decodeString, param);
              })), (function (param) {
            return $$Array.map(Belt_Option.getExn, param);
          }));
    return {
            day: day,
            week: week,
            time: Belt_Option.getExn(Belt_Option.map(Js_dict.get(obj, "time"), LessonTime.decode)),
            subject: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "subjet"), Js_json.decodeString)),
            type_: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "type"), Js_json.decodeString)),
            teacher: teacher,
            group: group,
            place: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "place"), Js_json.decodeString)),
            building: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "building"), Js_json.decodeString)),
            room: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "room"), Js_json.decodeString)),
            sync: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "sync"), Js_json.decodeString))
          };
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    return Pervasives.failwith("Failed to decode Lesson: " + ("" + error));
  }
}

var Lesson = {
  decodeExn: decodeExn$2
};

function decode(json) {
  try {
    var obj = Belt_Option.getExn(Js_json.decodeObject(json));
    var timetable = Belt_Option.getExn(Belt_Option.map(Belt_Option.flatMap(Js_dict.get(obj, "timetable"), Js_json.decodeArray), (function (param) {
                return $$Array.map(decodeExn$2, param);
              })));
    return {
            TAG: /* Ok */0,
            _0: {
              timetable: timetable,
              target: decodeStringExn(obj, "target"),
              type_: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "type"), Js_json.decodeString)),
              institute: decodeStringExn(obj, "institute")
            }
          };
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    return {
            TAG: /* Error */1,
            _0: "Failed to decode Timetable: " + ("" + error)
          };
  }
}

function $$fetch$1(target) {
  return Compat.$$Promise.thenResolve(Compat.$$Promise.then_(fetch("https://edu.sfu-kras.ru/api/timetable/get&target=" + encodeURIComponent(target)), (function (response) {
                    return response.json();
                  })), decode);
}

function fetchOpt(target) {
  return $$fetch$1(target).then(function (a) {
              if (a.TAG === /* Ok */0) {
                return a._0;
              }
              
            });
}

var Timetable = {
  decode: decode,
  $$fetch: $$fetch$1,
  fetchOpt: fetchOpt
};

var $$Option;

var Result;

var Json;

var Dict;

export {
  $$Option ,
  Result ,
  Json ,
  Dict ,
  decodeStringExn ,
  Day ,
  Week ,
  Lesson ,
  Timetable ,
  
}
/* No side effect */
